#!/usr/bin/env ruby

require "esomer"
require "optparse"

subcmd = ARGV.shift

if %w(-h --help help).include?(subcmd)
  puts <<-HELP
Usage: esomer command [options] [program file]

Command:
    build                     build an executable
    disassemble               convert a brainfuck code into human-readable code
    help, --help, -h          show this help
    version, --version, -v    show version
HELP
  exit 0
end

if %w(-v --version version).include?(subcmd)
  puts Esomer::VERSION
  exit 0
end

case subcmd
when "build"
  outfile = nil
  optimize = 0

  opt = OptionParser.new("Usage: esomer build [options] file")
  opt.on("-o OUT") {|filename| outfile = filename }
  opt.on("-O LEVEL") {|l| optimize = l.to_i }
  opt.parse!(ARGV)

  source_file = ARGV.shift

  if source_file.nil?
    STDERR.puts "Specify source file"
    exit 1
  end

  outfile = File.basename(source_file, ".bf") if outfile == nil && File.extname(source_file) == ".bf"
  outfile ||= "a.out"

  compiler = Esomer::Compiler.new
  compiler.build_executable(File.read(source_file), outfile, optimize_level: optimize)
when "disassemble"
  compiler = Esomer::Compiler.new
  filename = ARGV.shift
  if filename.nil?
    STDERR.puts "Specify source file"
    exit 1
  end
  puts compiler.disassemble(File.read(filename))
else
  STDERR.puts "Unsupported subcommand"
  exit 1
end

